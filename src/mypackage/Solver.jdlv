package mypackage;

import mypackage.Board.Tile;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.util.*;

public class Solver
{
	private int MAX_INT=131072;
	private int MAX_SCORE=59577;
	
	public List<Fact> facts=new ArrayList<Fact>();
	public List<String> result=new ArrayList<String>();
	public String strategy;
	Move move;

	Solver(){}
	
	Solver(Move m){
		facts.clear();
		result.clear();
		strategy="null";
		this.move=m;
		if(!java.util.Arrays.deepEquals(m.getGridUP(),m.getGrid()) && m.getGridUP()!= null)
		{
			System.out.println("gridUP e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridUP(),m.getScoreUP(),"UP"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridDOWN(),m.getGrid())&& m.getGridDOWN()!= null)
		{
			System.out.println("gridDOWN e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridDOWN(),m.getScoreDOWN(),"DOWN"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridLEFT(),m.getGrid())&& m.getGridLEFT()!= null)
		{
			System.out.println("gridLEFT e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridLEFT(),m.getScoreLEFT(),"LEFT"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridRIGHT(),m.getGrid())&& m.getGridRIGHT()!= null)
		{
			System.out.println("gridRIGHT e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridRIGHT(),m.getScoreRIGHT(),"RIGHT"));
		}
		
		result.add(DLV());
	}
	
	
	Solver(Move m, String s){
		facts.clear();
		result.clear();
		this.move=m;
		if(!java.util.Arrays.deepEquals(m.getGridUP(),m.getGrid())&& m.getGridUP()!= null)
		{
			System.out.println("gridUP e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridUP(),m.getScoreUP(),"UP"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridDOWN(),m.getGrid())&& m.getGridDOWN()!= null)
		{
			System.out.println("gridDOWN e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridDOWN(),m.getScoreDOWN(),"DOWN"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridLEFT(),m.getGrid())&& m.getGridLEFT()!= null)
		{
			System.out.println("gridLEFT e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridLEFT(),m.getScoreLEFT(),"LEFT"));
		}
		if(!java.util.Arrays.deepEquals(m.getGridRIGHT(),m.getGrid())&& m.getGridRIGHT()!= null)
		{
			System.out.println("gridRIGHT e Sorgente NON sono uguali");
			facts.add(generateFactS(m.getGridRIGHT(),m.getScoreRIGHT(),"RIGHT"));
		}
		
		this.strategy=s;
		
		result.add(DLV());
	}
	
	public String DLV()
	{
		List<String> res= new ArrayList<String>();
		
		for(Fact f : facts)
			System.out.println(f+".");
		System.out.println("CommonChoice("+'"'+strategy+'"'+").");
		
		if(move.getPrevious()!=null)
			System.out.println("PreviousChoice("+'"'+move.getPrevious().name()+'"'+").");
		
		writeFactsFile(facts,move);
		
		
		<#(newProgram)
			EXE="./dlv.mingw-odbc.exe";
		//	IN = facts::Grid;
			FILE = "./facts.txt";
			OUT = res::Best;
			
			
			//Grid(1,1,1,1,1,1,1,1,1,1,1,0,"test1",0).
			//Grid(0,1,1,1,1,1,1,1,1,1,1,0,"test2",0).
			//Grid(0,0,1,1,1,1,1,1,1,1,1,0,"test3",0).
			//Grid(0,0,0,1,1,1,1,1,1,1,1,0,"test4",0).
			//Grid(0,0,0,0,1,1,1,1,1,1,1,0,"test5",0).
			//Grid(0,0,0,0,0,1,1,1,1,1,1,0,"test6",0).
			//Grid(0,0,0,0,0,0,1,1,1,1,1,0,"test7",0).
			//Grid(0,0,0,0,0,0,0,1,1,1,1,0,"test8",0).
			//Grid(0,0,0,0,0,0,0,0,1,1,1,0,"test9",0).
			//Grid(0,0,0,0,0,0,0,0,0,1,1,0,"test10",0).
			//Grid(0,0,0,0,0,0,0,0,0,0,1,0,"test11",0).

			
			//Guess
			Best(M) | notBest(M) :- Grid(_,_,_,_,_,_,_,_,_,_,_,_,M,_).
			
		//NotEmptyCell(NEC,M) :- NEC = #sum {A,B,C,D,E,F,G,H,I,L : Grid(_,A,B,C,D,E,F,G,H,I,L,_,M,_)}.
			
			//Check
			:-#count{M:Best(M)} = 0. //Esiste sempre una mossa Best
			:-#count {M:Best(M)} > 1. //Esiste una sola mossa Best
		
		


		//DA IMPLEMENTARE REGOLA CHE DETIENE MONOTONICITA DELLA GRIGLIA
		//DA IMPLEMENTARE REGOLA CHE DETIENE SMOOTHLESS LA GRIGLIA
		
		
			//WEAK che non permettono di generare una mossa opposta alla precedente per non incasinare la griglia
			:~Best("DOWN"),PreviousChoice("UP").[1:1]
			:~Best("UP"),PreviousChoice("DOWN").[1:1]
			:~Best("LEFT"),PreviousChoice("RIGHT").[1:1]
			:~Best("RIGHT"),PreviousChoice("LEFT").[1:1]
			:~Best(M),not CommonChoice(M). [1:1]
			
			
			//MASSIMO CON ACCANTO MASSIMO
			:~notBest("LEFT"),MaxList(V,_,_,_),GridPos(V,V,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"ORIGINE",_). [1:28]
			:~notBest("LEFT"),MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,V,V,_,_,"ORIGINE",_). [1:28]
			:~notBest("RIGHT"),MaxList(V,_,_,_),GridPos(_,_,V,V,_,_,_,_,_,_,_,_,_,_,_,_,"ORIGINE",_). [1:28]
			:~notBest("RIGHT"),MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,_,_,V,V,"ORIGINE",_). [1:28]
			:~notBest("UP"),MaxList(V,_,_,_),GridPos(V,_,_,_,V,_,_,_,_,_,_,_,_,_,_,_,"ORIGINE",_). [1:28]
			:~notBest("UP"),MaxList(V,_,_,_),GridPos(_,_,_,V,_,_,_,V,_,_,_,_,_,_,_,_,"ORIGINE",_). [1:28]
			:~notBest("DOWN"),MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,V,_,_,_,V,_,_,_,"ORIGINE",_). [1:28]
			:~notBest("DOWN"),MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,V,_,_,_,V,"ORIGINE",_). [1:28]
			
			
			
			//TIENE IL VALORE MASSIMO AD UN ANGOLO
			:~notBest(M), MaxList(V,_,_,_),GridPos(V,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:24]
			
			:~notBest(M), MaxList(V,_,_,_),GridPos(_,_,_,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:24]
			
			:~notBest(M), MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,V,_,_,_,M,_). [1:24]
			
			:~notBest(M), MaxList(V,_,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,V,M,_). [1:24]
			
			//QUANDO IL VALORE MASSIMO E' ALL'ANGOLO IL SUBMASSIMO LO SEGUE
			:~notBest(M), MaxList(V,K,_,_),GridPos(V,K,_,_,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:25]
			:~notBest(M), MaxList(V,K,_,_),GridPos(V,_,_,_,K,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:25]
	//		:~notBest(M), MaxList(V,K,_,_),GridPos(V,_,_,_,_,K,_,_,_,_,_,_,_,_,_,_,M,_). [1:25] //DIAGONALE
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,K,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:25]
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,V,_,_,_,K,_,_,_,_,_,_,_,_,M,_). [1:25]
	//		:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,V,_,_,K,_,_,_,_,_,_,_,_,_,M,_). [1:25] //DIAGONALE
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,V,K,_,_,M,_). [1:25]
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,K,_,_,_,V,_,_,_,M,_). [1:25]
	//		:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,_,K,_,_,V,_,_,_,M,_). [1:25] // DIAGONALE
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,_,_,K,V,M,_). [1:25]
			:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,K,_,_,_,V,M,_). [1:25]
	//		:~notBest(M), MaxList(V,K,_,_),GridPos(_,_,_,_,_,_,_,_,_,_,K,_,_,_,_,V,M,_). [1:25] //DIAGONALE
			
			//QUANDO MASSIMO E SUBMASSIMO SONO IN POSIZIONE ANCHE IL SUBSUBMASSIMO 
			:~notBest(M), MaxList(V,K,J,_),GridPos(V,K,J,_,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:26]
			:~notBest(M), MaxList(V,K,J,_),GridPos(V,_,_,_,K,_,_,_,J,_,_,_,_,_,_,_,M,_). [1:26]
	//		:~notBest(M), MaxList(V,K,J,_),GridPos(V,_,_,_,_,K,_,_,_,_,J,_,_,_,_,_,M,_). [1:26] //DIAGONALE
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,J,K,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:26]
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,V,_,_,_,K,_,_,_,J,_,_,_,_,M,_). [1:26]
	//	    :~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,V,_,_,K,_,_,J,_,_,_,_,_,_,M,_). [1:26] //DIAGONALE
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,V,K,J,_,M,_). [1:26]
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,J,_,_,_,K,_,_,_,V,_,_,_,M,_). [1:26]
	//		:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,_,_,J,_,_,K,_,_,V,_,_,_,M,_). [1:26] // DIAGONALE
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,_,J,K,V,M,_). [1:26]
			:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,_,_,_,J,_,_,_,K,_,_,_,V,M,_). [1:26]
	//		:~notBest(M), MaxList(V,K,J,_),GridPos(_,_,_,_,_,J,_,_,_,_,K,_,_,_,_,V,M,_). [1:26] //DIAGONALE
	
			//QUNDO MASSIMO, SUBMASSIMO,SUBSUBMASSIMO sono in posizione NE AGGIUSTIAMO ANCHE UN ALTRO
			:~notBest(M), MaxList(V,K,J,Y),GridPos(V,K,J,Y,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(V,_,_,_,K,_,_,_,J,_,_,_,Y,_,_,_,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(V,_,_,_,_,K,_,_,_,_,J,_,_,_,_,Y,M,_). [1:27] //DIAGONALE
			:~notBest(M), MaxList(V,K,J,Y),GridPos(Y,J,K,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,V,_,_,_,K,_,_,_,J,_,_,_,Y,M,_). [1:27]
		    :~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,V,_,_,K,_,_,J,_,_,Y,_,_,_,M,_). [1:27] //DIAGONALE
			:~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,V,K,J,Y,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(Y,_,_,_,J,_,_,_,K,_,_,_,V,_,_,_,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,y,_,_,J,_,_,K,_,_,V,_,_,_,M,_). [1:27] // DIAGONALE
			:~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,_,_,_,_,_,_,_,_,_,Y,J,K,V,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(_,_,_,Y,_,_,_,J,_,_,_,K,_,_,_,V,M,_). [1:27]
			:~notBest(M), MaxList(V,K,J,Y),GridPos(Y,_,_,_,_,J,_,_,_,_,K,_,_,_,_,V,M,_). [1:27] //DIAGONALE

	
	
			
			
//			//Monotonicita' MAx in angolo alto sinistra
//			:~notBest(M), MaxList(V,_,_),GridPos(V,B,C,_,_,_,_,_,_,_,_,_,_,_,_,_,M,_), B<C.[1:25]
//			:~notBest(M), MaxList(V,_,_),GridPos(V,_,C,D,_,_,_,_,_,_,_,_,_,_,_,_,M,_), C<D.[1:25]
//			:~notBest(M), MaxList(V,_,_),GridPos(V,_,_,_,E,_,_,_,I,_,_,_,_,_,_,_,M,_), E<I.[1:25]
//			:~notBest(M), MaxList(V,_,_),GridPos(V,_,_,_,_,_,_,_,I,_,_,_,P,_,_,_,M,_), I<P.[1:25]
//			:~notBest(M), MaxList(V,_,_),GridPos(V,_,_,_,_,F,_,_,_,_,N,_,_,_,_,_,M,_), F<N.[1:25]
//			:~notBest(M), MaxList(V,_,_),GridPos(V,_,_,_,_,_,_,_,_,_,N,_,_,_,_,T,M,_), N<T.[1:25]
//			
//			//Monotonicita' MAx in angolo alto sinistra
//			:~notBest(M), MaxList(V,_,_),GridPos(_,B,C,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_), C>B.[1:24]
//			:~notBest(M), MaxList(V,_,_),GridPos(A,B,_,V,_,_,_,_,_,_,_,_,_,_,_,_,M,_), B>A.[1:23]
//			:~notBest(M), MaxList(V,_,_),GridPos(_,_,_,V,_,_,_,H,_,_,_,O,_,_,_,_,M,_), H>O.[1:22]
//			:~notBest(M), MaxList(V,_,_),GridPos(_,_,_,V,_,_,_,_,_,_,_,O,_,_,_,T,M,_), O>T.[1:21]
//			:~notBest(M), MaxList(V,_,_),GridPos(_,_,_,V,_,_,G,_,_,L,_,_,_,_,_,_,M,_), G>L.[1:20]
//			:~notBest(M), MaxList(V,_,_),GridPos(_,_,_,V,_,_,_,_,_,L,_,_,P,_,_,T,M,_), L>P.[1:19]
//			
			
			
			
			
			//WEAK di Minimizzazione
			:~Best(M),Grid(_,TWO,_,_,_,_,_,_,_,_,_,_,M,_). [TWO:12] //Minimizza celle TWO
			
			:~Best(M),Grid(_,_,FOUR,_,_,_,_,_,_,_,_,_,M,_). [FOUR:12] //Minimizza celle FOUR
			
			:~Best(M),Grid(_,_,_,EIGHT,_,_,_,_,_,_,_,_,M,_). [EIGHT:11]//Minimizza celle EIGHT
			
			:~Best(M),Grid(_,_,_,_,SIXTEEN,_,_,_,_,_,_,_,M,_). [SIXTEEN:10]//Minimizza celle SIXTEEN
			
			:~Best(M),Grid(_,_,_,_,_,THIRTYTWO,_,_,_,_,_,_,M,_). [THIRTYTWO:9] //Minimizza celle THIRTYTWO
			
			:~Best(M),Grid(_,_,_,_,_,_,SIXTYFOUR,_,_,_,_,_,M,_). [SIXTYFOUR:8] //Minimizza celle SIXTYFOUR
			
			:~Best(M),Grid(_,_,_,_,_,_,_,ONEHUNDERDTWENTYEIGHT,_,_,_,_,M,_). [ONEHUNDERDTWENTYEIGHT:7] //Minimizza celle ONEHUNDREDTWENTYEIGHT
			
			:~Best(M),Grid(_,_,_,_,_,_,_,_,TWOHUNDREDFIFTYSIX,_,_,_,M,_). [TWOHUNDREDFIFTYSIX:5] //Minimizza celle TWOHUNDREDFIFTYSIX
			
			:~Best(M),Grid(_,_,_,_,_,_,_,_,_,FIVEHUNDREDTWELVE,_,_,M,_). [FIVEHUNDREDTWELVE:4] //Minimizza celle FIVEHUNDREDTWELVE
	
			:~notBest(M),Grid(_,_,_,_,_,_,_,_,_,_,_,_,_,V). [V:3] //Massimizza il Valore di Best
	
			:~notBest(M),Grid(E,_,_,_,_,_,_,_,_,_,_,_,M,_). [E:3] //Minimizza celle EMPTY
		
		
		//:~Best(M),Grid(_,_,_,_,_,_,_,_,_,_,ONETHOUSANDTWENTYFOUR,_,M,_). [ONETHOUSANDTWENTYFOUR:3] //Minimizza celle ONETHOUSANDTWENTYFOUR
			
		//	:~Best(M),Grid(_,_,_,_,_,_,_,_,_,_,_,TWOTHOUSANDFOURTHYEIGHT,M,_). [1:1] //Minimizza celle TWOTHOUSANFOURTHYEIGHT
		
		#>
		if_no_answerset{
			System.out.println("No Answer Set");
			result.add("noAS");
		}	
		
		if(res.size()!=0){
			System.out.println("Mossa scelta "+res.get(0));
			
			if(move.getPrevious()!=null)
				System.out.println("PreviousChoice("+'"'+move.getPrevious().name()+'"'+").");
				
			return res.get(0);
		}
		
		return "ALTRO";
	}
		
	public void writeFactsFile(List<Fact> source,Move m)
	{
	  try
     {
          FileOutputStream fos = new FileOutputStream("./facts.txt");
          PrintStream write = new PrintStream(fos);
          for(Fact f:source)
          	{
            	    write.println(f+".");
          	}
          if(!strategy.equals("null"))
          {
          	write.println("CommonChoice("+'"'+strategy+'"'+").");
          }
          if(m.getPrevious()!=null)
          {
          	write.println("PreviousChoice("+'"'+m.getPrevious().name()+'"'+").");
          }
          
          int gridT [][] =m.getGrid();
          int scoreT =m.getScore();
          List<Integer> maxL=new ArrayList<Integer>();
		 
		 if(gridT!=null)
          {
          	write.print("GridPos(");
          	for(int i=0;i<4;i++)
          		for(int j=0;j<4;j++)
          		{
          			write.print(gridT[i][j]+",");
          		}
          		
          		write.println('"'+"ORIGINE"+'"'+","+scoreT+").");
          }
		
		
		
		
		for(int i=0;i<4;i++)
          	for(int j=0;j<4;j++)
          	{
          		//if(!maxL.contains(gridT[i][j]) )
          				maxL.add(gridT[i][j]);
          	}
          			
          
          if(maxL.size()>3)
          {
          
         
       	 	Collections.sort(maxL,Collections.reverseOrder());
          
       		write.println("Max("+maxL.get(0)+").");
        
   
          	write.print("MaxList("+maxL.get(0));
          	
         	for(int i=1;i<4;i++)
          		write.print(","+maxL.get(i));
          	write.println(").");
          	
          }
          
          scoreT=m.getScoreUP();
          gridT=m.getGridUP();
          if(gridT!=null)
          {
          	write.print("GridPos(");
          	for(int i=0;i<4;i++)
          		for(int j=0;j<4;j++)
          		{
          			write.print(gridT[i][j]+",");
          		}
          		
          		write.println('"'+"UP"+'"'+","+scoreT+").");
          }
          
          gridT =m.getGridDOWN();
          scoreT=m.getScoreDOWN();

          
          if(gridT!=null)
          {
          	write.print("GridPos(");
          	for(int i=0;i<4;i++)
          		for(int j=0;j<4;j++)
          		{
          			write.print(gridT[i][j]+",");

          		}
          		
          		write.println('"'+"DOWN"+'"'+","+scoreT+").");
          }
          
          gridT =m.getGridRIGHT();
          scoreT=m.getScoreRIGHT();

          
          if(gridT!=null)
          {
          	write.print("GridPos(");
          	for(int i=0;i<4;i++)
          		for(int j=0;j<4;j++)
          		{
          			write.print(gridT[i][j]+",");
          		}
          		
          		write.println('"'+"RIGHT"+'"'+","+scoreT+").");
          }
          
          gridT =m.getGridLEFT();
          scoreT=m.getScoreLEFT();
          
          if(gridT!=null)
          {
          	write.print("GridPos(");
          	for(int i=0;i<4;i++)
          		for(int j=0;j<4;j++)
          		{
          			write.print(gridT[i][j]+",");
          		}
          		
          		write.println('"'+"LEFT"+'"'+","+scoreT+").");
          }
          
          
      }
         catch (IOException e)
      {
          System.out.println("Errore: " + e);
          System.exit(1);
      }
      
	}
	
	
	public Fact generateFactS(int values[][], int score, String m) 
	{
		int E, TWO, FOUR, EIGHT, SIXTEEN, THIRTYTWO, SIXTYFOUR,
			ONEHUNDREDTWENTYEIGHT, TWOHUNDREDFIFTYSIX, FIVEHUNDREDTWELVE,
			ONETHOUSANDTWENTYFOUR, TWOTHOUSANDFOURTHYEIGHT, V;
		String M;
		
		E = 0;
		TWO = 0;
		FOUR = 0;
		EIGHT = 0;
		SIXTEEN = 0;
		THIRTYTWO = 0;
		SIXTYFOUR = 0;
		ONEHUNDREDTWENTYEIGHT = 0;
		TWOHUNDREDFIFTYSIX = 0;
		FIVEHUNDREDTWELVE = 0;
		ONETHOUSANDTWENTYFOUR = 0;
		TWOTHOUSANDFOURTHYEIGHT = 0;
		V = score;
		M = m;
 
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++) {
				/*if(values[i][j]== 0)
				{
					E++;
				}
				if(values[i][j]==2)
				{
					TWO++;
				}
				if(values[i][j]==4)
				{ 
					FOUR++;
				}
				if(values[i][j]==8)
				{ 
					EIGHT++;
				}else if(values[i][j]==16)
				{ 
					
				}else if(values[i][j]==32)
				{
					
				}else if(values[i][j]==64)
				{
					
				}else if(values[i][j]==128)
				{
					
				}else if(values[i][j]==256)
				{
					
				}else if(values[i][j]==512)
				{
					
				}else if(values[i][j]==1024)
				{
					
				}else if(values[i][j]==2048)
				{
					
				}
					
				*/switch (values[i][j]) {
				case 0: E++;
					break;
				case 2:
					TWO++;
					break;
				case 4:
					FOUR++;
					break;
				case 8:
					EIGHT++;
					break;
				case 16:
					SIXTEEN++;
					break;
				case 32:
					THIRTYTWO++;
					break;
				case 64:
					SIXTYFOUR++;
					break;
				case 128:
					ONEHUNDREDTWENTYEIGHT++;
					break;
				case 256:
					TWOHUNDREDFIFTYSIX++;
					break;
				case 512:
					FIVEHUNDREDTWELVE++;
					break;
				case 1024:
					ONETHOUSANDTWENTYFOUR++;
					break;
				case 2048:
					TWOTHOUSANDFOURTHYEIGHT++;
					break;
					
			}
		}
	}
	return new Fact(E, TWO, FOUR, EIGHT, SIXTEEN, THIRTYTWO,
		SIXTYFOUR, ONEHUNDREDTWENTYEIGHT, TWOHUNDREDFIFTYSIX,
		FIVEHUNDREDTWELVE, ONETHOUSANDTWENTYFOUR,
		TWOTHOUSANDFOURTHYEIGHT, V, M);
	
	
}	
}